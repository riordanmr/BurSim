{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2 Times New Roman;}{\f1\fswiss\fcharset0\fprq2 Arial;}{\f2\fmodern\fcharset0\fprq1 Courier New;}{\f3\froman\fcharset2\fprq2 Symbol;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}{\f28\fmodern\fcharset238\fprq1 Courier New CE;}{\f29\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f31\fmodern\fcharset161\fprq1 Courier New Greek;}{\f32\fmodern\fcharset162\fprq1 Courier New Tur;}{\f33\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \snext0 Normal;}{\s1\li115\ri130\sb120\sa80\widctlpar\adjustright \b\f1\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\s2\li115\ri360\sb120\sa48\widctlpar\adjustright \b\f1\fs22\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li115\ri130\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\ri130\sa48\widctlpar\adjustright \f1\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li115\ri130\sb240\sa60\widctlpar\adjustright \f1\fs22\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li115\ri130\sb240\sa60\widctlpar\adjustright \i\f1\fs22\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li115\ri130\sb240\sa60\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li115\ri130\sb240\sa60\widctlpar\adjustright \i\f1\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li115\ri130\sb240\sa60\widctlpar\adjustright \i\f1\fs18\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext15 footnote text;}{\*\cs16 \additive \super \sbasedon10 footnote reference;}{\s17\li302\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext17 Topic Text Indent;}{\s18\li720\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext18 Normal Indent;}{\s19\li115\ri130\sb120\sa80\sl-240\slmult0\widctlpar\adjustright \b\f1\fs16\lang1024\cgrid \snext0 Tip/Note Heading;}{\s20\li302\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext20 Tip/Note Text;}{\s21\fi-360\li475\ri130\sa48\widctlpar\tx302\jclisttab\tx475{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls12\adjustright \f1\fs20\cgrid \sbasedon20 \snext21 Tip/Note Text Bulleted;}{\s22\fi-360\li475\ri130\sa48\widctlpar\tx302\jclisttab\tx475{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \f1\fs20\cgrid \sbasedon0 \snext22 Topic Text Bulleted;}{\s23\fi-187\li302\ri130\sa48\widctlpar\tx302{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \f1\fs20\cgrid \sbasedon0 \snext23 Topic Text Numbered;}{\s24\fi-187\li302\ri130\sa48\widctlpar\tx274\adjustright \f1\fs20\cgrid \sbasedon0 \snext0 Topic Text Onestep;}{\s25\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid \sbasedon0 \snext25 Block Text;}{\s26\widctlpar\adjustright \f2\fs20\cgrid \sbasedon0 \snext26 Plain Text;}{\s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid \sbasedon26 \snext28 API;}{\s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 Command;}{\s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid \sbasedon0 \snext30 Code;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}{\list\listtemplateid-1172924662\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f1\fs16\fbias0 \s23\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid133064239}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid594173417}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid625281553}{\list\listtemplateid-2099371776\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-600\li715\jclisttab\tx715 }{\listname ;}\listid806241419}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1008486551}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1011687179}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1279068346}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1401824188}{\list\listtemplateid-1481447902\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\cf0\fbias0 \s22\fi-360\li475\jclisttab\tx475 }{\listname ;}\listid1458330772}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1636791344}{\list\listtemplateid773758716\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\'00;}{\levelnumbers\'01;}\b0\i0\f2\fs16\fbias0 \fi-187\li302 }{\listname ;}\listid1772432900}{\list\listtemplateid886083060\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\cf0\fbias0 \s21\fi-360\li475\jclisttab\tx475 }{\listname ;}\listid2074572765}}{\*\listoverridetable{\listoverride\listid1458330772\listoverridecount0\ls1}{\listoverride\listid1772432900\listoverridecount0\ls2}{\listoverride\listid1279068346\listoverridecount0\ls3}{\listoverride\listid625281553\listoverridecount0\ls4}{\listoverride\listid1008486551\listoverridecount0\ls5}{\listoverride\listid1401824188\listoverridecount0\ls6}{\listoverride\listid1011687179\listoverridecount0\ls7}{\listoverride\listid1636791344\listoverridecount0\ls8}{\listoverride\listid594173417\listoverridecount0\ls9}{\listoverride\listid133064239\listoverridecount0\ls10}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent187{\leveltext\'01\u-3986 ?;}{\levelnumbers;}\f3\fs10\fbias0 \fi-187\li302 }}\ls11}{\listoverride\listid2074572765\listoverridecount0\ls12}{\listoverride\listid806241419\listoverridecount0\ls13}}{\info{\title Help Project generated with RoboHELP\'ae.}{\author RoboHELP}{\operator Mark Riordan}{\creatim\yr2000\mo1\dy27\hr11\min24}{\revtim\yr2000\mo1\dy27\hr11\min24}{\version2}{\edmins0}{\nofpages27}{\nofwords3832}{\nofchars21846}{\nofcharsws26828}{\vern89}}\widowctrl\ftnbj\aenddoc\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\lytprtmet\hyphcaps0\fracwidth\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0{\*\template C:\\MSOffice\\Templates\\Robohelp.dot}\sectd \linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Contents}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Contents}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Contents}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Contents
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim is a Win32 program that simulates some aspects of a Burroughs mid-range computer.  It simulates the }{\uldb\cf11 console display}{\v Console_display}{, implements a few MCP }{\uldb\cf11 commands}{\v Commands}{, allows you to run }{\uldb\cf11 scripts}{\v Scripting_overview}{, and implements a }{\uldb\cf11 telnet server}{\v Telnet_server}{ so that T27 terminal emulators can access running scripts.
{\v0\par\v}}{\uldb\cf11 Historical background}{\v Historical_background}{ \line }{\uldb\cf11 Installing and running}{\v Installing_and_running}{ \line }{\uldb\cf11 Configuring}{\v Configuring}{ \line }{\uldb\cf11 Console display}{\v Console_display}{ \line }{\uldb\cf11 Commands}{\v Commands}{ \line }{\uldb\cf11 Telnet server}{\v Telnet_server}{ \line }{\uldb\cf11 Scripting overview}{\v Scripting_overview}{ \line }{\uldb\cf11 Scripting API}{\v Scripting_API}{ \line }{\uldb\cf11 Form files}{\v Form_files}{ \line }{\uldb\cf11 Station table}{\v Station_table}{ 
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Historical_background}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Historical background}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Historical background}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Historical background
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Burroughs mid-range computers were a type of mainframe computer designed in the 1960's and sold until the 1990's.  When Burroughs and Sperry-Univac merged in 1986 to become Unisys, the line became known as the Unisys V-Series.  As of this writing in 1999, V-Series computers had not been sold in several years, but they are supported and are still in use.  Official support terminates in the year 2000 (the operating system is Y2K compliant!), but no doubt the V-Series will live well in to the 21st century.
\par Burroughs mid-range systems were not inherently interactive systems.  You had to add extra hardware and software\emdash often third-party\emdash to be able to access them from terminals.  However, the systems did have a console from which an operator could control the system.  This program simulates that console; see }{\uldb\cf11 Console display}{\v Console_display}{.
{\v0\par\v}The author (Mark Riordan, riordan@awa.com) has never actually encountered a Burroughs mid-range system, and did not encounter a Unisys V-Series computer until 1996.  Additional information and feedback from Burroughs old-timers would be appreciated.
{\v0\par\v}BurSim was written in the summer of 1999.
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Installing_and_running}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Installing and running}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Installing and running}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Installing and running
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim can be run either as a normal windowed Win32 application (the default), or as a screen saver.  To run it as a screen saver, copy it to your Windows system directory (typically \\WINNT\\SYSTEM32 on a Windows NT system, or \\WINDOWS\\SYSTEM on a Win9x system) as the file BurSim.scr.  You can then configure your desktop to run the "Burroughs Console Simulator" screen saver via the Display control panel applet.
\par You can preview screen-saver mode by running BurSim with the \endash s command-line option.  
\par However, many of BurSim's features are usable only through the keyboard, and hence cannot be used in screen-saver mode.
\par }\pard\plain \s25\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {When BurSim is used as a screen saver, you will probably want to take advantage of the fact that  BurSim automatically runs a program named INIT (if present) at startup.  You may want to write such a program to enter various jobs into the mix so that the screen saver is more interesting.
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim is usually called without command-line arguments.  However, the full command-line syntax is:
\par BurSim [-c | -s] [-i IniFileName]
\par where:
\par }\pard \fi-630\li720\ri130\sa48\widctlpar\adjustright {-c\tab brings up BurSim's configuration dialog.
\par -s\tab runs BurSim in screen-saver mode.  That is, the program takes over the whole screen, and exits as soon as a key is pressed or the mouse is moved.
\par -w\tab starts BurSim in normal windowed mode.  This is the default.
\par -n\tab starts BurSim minimized.
\par 
\par -i\tab specifies the name of an initialization file to use.  If \endash i is not specified, the filename BurSim.ini is read from the Windows directory (which can be found in the environment variable SYSTEMROOT).
\par See }{\uldb\cf11 Configuring}{\v Configuring}{.
{\v0\par\v}
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Configuring}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Configuring}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Configuring}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Configuring
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim stores a number of configuration settings in its initialization file.  (This file is typically named BurSim.ini; see }{\uldb\cf11 Installing and running}{\v Installing_and_running}{.  Some of these can be changed via the Configure dialog accessible through BurSim's system menu.  This is the menu at the extreme left of the title bar.  It is marked by a green icon depicting a console screen.
{\v0\par\v}The initialization file has the format: 
{\v0\par\v}}\pard \li540\ri130\sa48\widctlpar\adjustright {\f2 [Config]
\par }\pard \li540\widctlpar\adjustright {\f2 LogFile=log_file_name
\par Debug=debug_level
\par FontSize1Saver=font_size_in_screen_saver_mode
\par FontSize1Windowed=font_size_in_windowed_mode
\par SecsDelayBetweenRefreshes=seconds_between_refreshes
\par Hostname=hostname_displayed_on_third_line
\par ScriptsPath=directory_for_scripts
\par RunDebuggerOnRuntimeError=0 or 1
\par TCPListenPort=TCP_port_number
\par ListenIP=dotted_IP_address
\par }\pard \li115\widctlpar\adjustright {\f2 
\par }\pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {where
\par }\pard \s15\fi-1350\li1440\ri130\sa48\widctlpar\adjustright {LogFile\tab specifies the (Windows) filename to which debugging information should be logged.  The default is BurSim.log, in the current directory.
\par Debug \tab specifies a number from 0 to 9, where larger numbers cause increasing amounts of information to be logged in the debug log.  The default is 0.
\par FontSize1Saver\tab specifies the point size of the font to use in screen saver mode.  The default is 15.  The font used is Lucida Console.
\par FontSize1Windowed\tab specifies the point size of the font to use in normal windowed mode.  The default is 10.
\par SecsDelayBetweenRefreshes\tab specifies the number of seconds to delay between refreshes of the screen.  The default is 10, which mimics the behavior of a real V-Series console.
\par Hostname\tab is the name of the host to be displayed on the third line of the screen.  The default is the Windows name of the computer.
\par ScriptsPath\tab is the name of the directory in which BurSim will look for script files.  The default is DISK (from the current directory).
\par RunDebuggerOnRuntimeError\tab is 1 if you want BurSim to ask whether to run the Windows Script Debugger when a runtime error occurs.  If you choose 1 and a runtime error occurs, you will be prompted "Do you want to debug the application?"  If you say "Yes", the debugger will start, but BurSim will exit when the script debugger exits.  \line If you specify 0, then when a runtime error occurs, a dialog will be displayed and a message will be logged in the SPO, but BurSim will not exit when you click OK in the dialog. 
\par TCPListenPort\tab is the number of the TCP port on which to listen.  The default is 23.  You can run multiple copies of BurSim with different initialization files (using the \endash i parameter), and have each listen on a different port.  
\par ListenIP\tab is the numeric IP address (such as 192.168.0.147) on which BurSim will listen for connections.  The default to listen on all available IP addresses for this computer.  This can be useful if you want to run multiple telnet servers on your Windows NT system.  NT can be set up to have multiple IP addresses, even if you have a single network adapter.
\par 
\par 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Console_display}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Console display}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Console display}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Console display
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {A Burroughs console looked just like a terminal.  Commands would be entered via the keyboard, and responses would be displayed on CRT.  When not responding to operator input, the console would cycle through three different displays, leaving each on the screen for 10 seconds.  
\par BurSim attempts to mimic the appearance and functionality of a Burroughs console.  However, currently only a small subset of functionality is implemented.  Fortunately, enough has been implemented to be amusing, if not useful.
\par Keyboard editing is barebones: only the cursor-left, cursor-right, home, and backspace keys are available for editing your input.  (The backspace key does the same thing as cursor-left.)
\par 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Commands}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Commands}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Commands}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Commands
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Commands are entered via the keyboard, and are executed by pressing the Enter key.  When you press the Enter key, only the characters on the top row of the screen, up to but not including the cursor, are parsed as a command.  
\par In the command descriptions below, brackets, namely [ ], are used to describe optional parameters.  The brackets themselves are not actually typed.  Also, <mix> refers to a decimal number corresponding to the mix number of a job that is actually running.  Typing command that refers to a mix number that does not exist will result in an error message.
\par BurSim accepts these commands:
\par }\pard\plain \s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid {DQ [linenum]
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Displays a screen's worth of system messages.  If linenum is omitted, the last 18 lines added to the system message log are displayed.  This is the same as the message log display that is automatically refreshed periodically.  If linenum is entered, one screen's worth (18 lines) of messages are displayed, starting linenum lines back from the most recent message.
\par }\pard\plain \s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid {WY
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Displays the jobs in the mix.  Each line contains the job's priority, the name of the program, the mix number, and the job's status.
\par }\pard\plain \s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid {EX progname [PR priority]
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Runs a program.  See }{\uldb\cf11 Scripting overview}{\v Scripting_overview}{ . Priority is a decimal number specifying the priority; see the PR command.
{\v0\par\v}}\pard\plain \s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid {<mix> PR priority
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Sets the job's priority.  BurSim actually maps the Burroughs-style priority number into a Win32 thread priority, so lower priority programs actually do run at a lower priority within BurSim.  However, Win32 has fewer priority levels than Burroughs.
\par }\pard\plain \s29\li115\ri130\sb120\sa48\widctlpar\adjustright \b\f1\fs20\cgrid {<mix> AX text
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Sends the text to the program.  The program can read it with an Accept statement.
\par 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Telnet_server}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Telnet server}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Telnet server}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Telnet server
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim contains a built-in telnet server that allows users with terminal emulators to connect to BurSim as if it were a mainframe computer.  You can write scripts which will interact with users in much the same way as mainframe programs do.  In fact, your scripts can so closely mimic the behavior of mainframe applications that users will not be able to tell that they are not using a mainframe computer.
\par BurSim currently implements only the Unisys T27 terminal protocol, and only as a telnet server (as opposed to a client terminal emulator).  
\par When a user connects to a copy of BurSim, they see a canned welcome screen.  After that, they can access a running script by typing the transaction:
\par /progname
\par where progname is the name of a program (script) that is already running.  This script must have been executed with the EX command.  Only the program name is specified, not the file extension.  For example, if you started the script DISK/PROG1.VBS by typing EX PROG1 at the console, your users would type /PROG1 to access the script.
\par Once a user has established a transaction by transmitting a message that starts with a "/", all subsequent messages will go to that same program until another message starting with "/" is transmitted.  
\par The current implementation requires transaction names and program names to be identical.  
\par The telnet server can listen at an IP address and port number of your choosing; see }{\uldb\cf11 Configuring}{\v Configuring}{.
{\v0\par\v}
{\v0\par\v}
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Scripting_overview}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Scripting overview}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Scripting overview}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Scripting overview
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim allows you to simulate running Burroughs-style programs by running scripts using Microsoft scripting technology.  Currently, only VBScript (a subset of Visual Basic) has been successfully tested.  To run a program, use the EX command and specify a filename without an extension.  BurSim will look in the DISK subdirectory for a file of that name, with a .vbs extension.
\par If you are running Microsoft Internet Explorer 4.0 or greater, you already have the necessary DLLs to run VBScript.  You can download the latest Microsoft Scripting Engines from msdn.microsoft.com/scripting.  Both the VBScript implementation and the language documentation are available free of charge from this site.  BurSim has been tested only with Microsoft Scripting Engine version 5.0, but it will probably work with earlier versions.
\par To write a BurSim program, use any test editor to create a VBScript source file.  Several subroutines and functions have been added to the language to simulate the Burroughs environment; see }{\uldb\cf11 Scripting API}{\v Scripting_API}{.
{\v0\par\v}Some work has been done to support JavaScript and Python.  However, JavaScript does not work well, and Python support does not include any BurSim-specific extensions, which makes it pretty worthless.
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Scripting_API}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Scripting API}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Scripting API}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Scripting API
\par }\pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {The following functions have been added to the scripting API.  
\par }\pard\plain \s26\li90\widctlpar\adjustright \f2\fs20\cgrid {\uldb\cf11 Accept}{\v Accept}{ OperatorMsg
{\v0\par\v}}{\uldb\cf11 FillField}{\v FillField}{ FormID, FieldName, ScrnBuf, NewChars
{\v0\par\v}FieldChars = }{\uldb\cf11 GetInputField}{\v GetInputField}{ (FormID, FieldName, InBuf)
{\v0\par\v}retcode = }{\uldb\cf11 GetSTOQMsg}{\v GetSTOQMsg}{ (STOQName, RecvdHeader, RecvdBuf)
{\v0\par\v}ScrnBuf = }{\uldb\cf11 InitFormBuf}{\v InitFormBuf}{ (FormID)
{\v0\par\v}FormID = }{\uldb\cf11 OpenForm}{\v OpenForm}{ (FormFileID, FormName)
{\v0\par\v}FormFileID = }{\uldb\cf11 OpenFormFile}{\v OpenFormFile}{ (LPCTSTR Filename)
{\v0\par\v}retcode = }{\uldb\cf11 SendMCSBuf}{\v SendMCSBuf}{ (Header, ScrnBuf)
{\v0\par\v}}{\uldb\cf11 SendSTOQMsg}{\v SendSTOQMsg}{ STOQName, Buf
{\v0\par\v}}{\uldb\cf11 SPOMsg}{\v SPOMsg}{ Text
{\v0\par\v}}{\uldb\cf11 SuppressField}{\v SuppressField}{ FormID, FieldName, ScrnBuf
{\v0\par\v}which = }{\uldb\cf11 Wait}{\v Wait}{ (Secs, STOQsToWaitFor, STOQGotten)
{\v0\par\v}}{\uldb\cf11 ZIP}{\v ZIP}{ Command
{\v0\par\v}}\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Accept}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Accept}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Accept}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Accept
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {Accept OperatorMsg
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Waits for the operator to AX a message into the mix number of this job, and returns the message in OperatorMsg.  Leading spaces are trimmed.  If a message is already pending, Accept returns that message immediately without waiting.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ FillField}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ FillField}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ FillField}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ FillField
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {FillField  FormID, FieldName, ScrnBuf, NewChars
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Given a form ID (from OpenForm) and the name of a field, replaces the appropriate range of characters in the screen image ScrnBuf with the contents of NewChars.  NewChars is truncated on the right, or blank-filled on the right, as necessary. 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ GetInputField}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ GetInputField}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ GetInputField}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ GetInputField
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {FieldChars = GetInputField(FormID, FieldName, InBuf)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Retrieves the contents of an input field from a buffer returned by GetSTOQMsg. 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ GetSTOQMsg}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ GetSTOQMsg}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ GetSTOQMsg}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ GetSTOQMsg
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {retcode = GetSTOQMsg(STOQName, RecvdHeader, RecvdBuf)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Waits for a message to appear in the storage queue STOQName, and returns its header in RecvdHeader, and the main contents of the buffer in RecvdBuf.  
\par The header will always be an empty string unless the message came from the MCS via user Telnet terminal input.  In that case, RecvdHeader contains the terminal ordinal of the sending terminal, and the terminal's station name as received during SENDLOC telnet negotiations.  Typically, a program will not process RecvdHeader, but merely pass it to }{\uldb\cf11 SendMCSBuf}{\v SendMCSBuf}{ when a reply is being sent to the terminal that sent the input message.  However, the following fields in the header are documented:
{\v0\par\v}
{\v0\par\v}}\trowd \trgaph108\trleft90\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx1170\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx2160\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx6930\pard \sa48\widctlpar\intbl\adjustright {\b Position\line (1=first) \cell }\pard \ri-18\sa48\widctlpar\intbl\adjustright {\b Length\cell }\pard \ri130\sa48\widctlpar\intbl\adjustright {\b Field description\cell }\pard \widctlpar\intbl\adjustright {\b \row }\trowd \trgaph108\trleft90\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx1170\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx2160\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx6930\pard \ri130\sa48\widctlpar\intbl\adjustright {13\cell }\pard \ri-18\sa48\widctlpar\intbl\adjustright {6\cell }\pard \ri130\sa48\widctlpar\intbl\adjustright {Connection number, right justified and zero filled.  This is dynamically assigned by BurSim, starting at 1 for the first connection.\cell }\pard \widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft90\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx1170\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx2160\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb \cellx6930\pard \ri130\sa48\widctlpar\intbl\adjustright {20\cell }\pard \ri-18\sa48\widctlpar\intbl\adjustright {18\cell }\pard \ri130\sa48\widctlpar\intbl\adjustright {Telnet location (also known as station name), left-justified and blank filled.  This is supplied by the terminal emulator.\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \li115\ri130\sa48\widctlpar\adjustright {
\par BurSim enforces a convention whereby the MCS returns messages from terminals to STOQs that have the same name as the transaction / program the user is running.
\par If a message is already available, GetSTOQMsg returns immediately.  It is recommended that GetSTOQMsg be called only after a call to Wait has confirmed that a message is available.  Otherwise, your program could wait forever, and be oblivious to other input such as operator AX commands.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ InitFormBuf}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ InitFormBuf}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ InitFormBuf}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ InitFormBuf
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {ScrnBuf = InitFormBuf(FormID)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Initializes a screen buffer from a form ID.  The screen buffer contains the necessary escape sequences to home the cursor, enter forms mode, etc.  It also contains the fixed text from the screen definition, and control characters necessary to define transmittable prompts and unprotected fields.  However, the contents of all three types of fields will be set to spaces.
\par You would typically call InitFormBuf once for each message sent to any terminal, prior to any calls to }{\uldb\cf11 FillField}{\v FillField}{.
{\v0\par\v}}\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ OpenForm}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ OpenForm}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ OpenForm}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ OpenForm
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {FormID = OpenForm(FormFileID, FormName)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Returns a form identifier used in other API calls to refer to the named form in the specified form file.
\par You don't need to call OpenForm more than once per form per program; you may wish to call it during initialization.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ OpenFormFile}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ OpenFormFile}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ OpenFormFile}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ OpenFormFile
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {FormFileID = OpenFormFile(LPCTSTR Filename)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Returns an identifier referring to the given form file.  Filename is a Win32 filename, either a full absolute path, or a filename relative to BurSim's current directory.
\par Currently, there is no way to close a form file.  This will be addressed in a future release.  As it stands, you can open a form file multiple times during the running of a program, in order to take advantage of changes made to the form file while the program is running.  However, each opening of the file will cause additional memory to be allocated inside BurSim.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ SendMCSBuf}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ SendMCSBuf}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ SendMCSBuf}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ SendMCSBuf
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {retcode = SendMCSBuf(Header, ScrnBuf)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Sends a message to a terminal.  ScrnBuf is taken as the literal bytes to send to the terminal, including escape sequences and control characters.  The only processing done to the buffer by BurSim is to translate it from ASCII to EBCDIC.  Header is currently used only to specify the terminal to which to send the message.  
\par SendMCSBuf ostensibly sends a message to the Message Control System, but in the current implementation there is no actual separate MCS.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ SendSTOQMsg}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ SendSTOQMsg}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ SendSTOQMsg}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ SendSTOQMsg
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {SendSTOQMsg STOQName, Buf
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Sends a message to the named STOrage Queue.  This routine is used only for program-to-program communication; to send a message to a terminal, use SendMCSBuf.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ SPOMsg}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ SPOMsg}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ SPOMsg}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ SPOMsg
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {SPOMsg Text
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Enters a message into the system log.  This log can be viewed via the DQ operator command.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ SuppressField}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ SuppressField}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ SuppressField}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ SuppressField
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {SuppressField FormID, FieldName, ScrnBuf
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Modifies the screen buffer ScrnBuf to eliminate the field named by FieldName.  The field must be a transmittable prompt or an unprotected field.  The routine simply replaces the control characters that define the field with spaces.
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Wait}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Wait}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Wait}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Wait
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {which = Wait(Secs, STOQsToWaitFor, STOQGotten)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {This important function causes the job to wait until one of these conditions is satisfied:
\par 1.  Secs seconds go by.  In this case, which is set to 1.
\par 2.  An operator enters an AX command for this job.  In this case, which is set to 2.
\par 3.  A message appears on one of the STOQs named in STOQsToWaitFor.  This variable is a list of STOQ names separated by vertical bar (|) characters.  In practice, this is usually just the name of the program, since usually messages come only from the MCS (from terminals).  In this case, which is set to 3, and STOQGotten is set to the name of the STOQ on which a message is available.
\par You will probably want to use code like this:
\par 
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {Const WAIT_TIMEOUT=1, WAIT_ODT=2, WAIT_STOQ=3
\par Do While bRunning
\par    which = Wait(9999,"SWIM",STOQ)
\par    Select Case which
\par       Case WAIT_TIMEOUT
\par          ' Process timeout here
\par       Case WAIT_ODT
\par          Accept ODTMsg
\par          If "QUIT" = ODTMsg Then 
\par             bRunning = False
\par          Else
\par             SPOMsg "Unrecognized command: " & ODTMsg
\par          End If
\par       Case WAIT_STOQ
\par          retval = GetSTOQMsg(STOQ, Header, InBuf)
\par          ' Process message here
\par          retval = SendMCSBuf(Header, Buf)
\par    End Select
\par Loop
\par 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ ZIP}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ ZIP}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ ZIP}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ ZIP
\par }\pard\plain \s28\li86\sa120\widctlpar\adjustright \f2\fs20\cgrid {ZIP Command
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Executes the given command, which is nearly always an EX command.
\par 
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Form_files}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Form files}}}{ }{\cs16\super K{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super K}{ Form files}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0|Mark Riordan|||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Form files
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Form files are specially formatted ASCII text files defining screens. Several BurSim API calls use form files to simplify the tasks of sending screens to a terminal emulator, and interpreting input from an emulator.  You are encouraged to use form files to simplify script development, but equivalent scripts can always be written without form files.  
\par A form file contains definitions for zero or more named screens, also known as forms.  Each screen contains constant text, and optional named input and output fields.  
\par Within a form file, the definition of a screen and its fields is contained in a contiguous block of text lines.  Lines beginning with a semicolon (";") are always treated as comments.  Each screen definition consists of an image of the screen with embedded field names, optionally followed by alias definitions for fields on that screen.  
\par }\pard\plain \s2\li115\ri360\sb120\sa48\widctlpar\outlinelevel1\adjustright \b\f1\fs22\cgrid {Screen images
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {A screen image is a depiction of the appearance of a screen, with special markers for named fields on the screen.  A screen image is bracketed between !Form and !EndForm lines as follows:
\par }{\f2 !Form}{ form_name
\par   (screen image lines describing the screen and its embedded fields)
\par }\pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\f2 !EndForm
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {BurSim assumes that all screens are exactly 80 characters wide.  It will pad screen definition lines to 80 characters if there are lines in the screen image that are less than 80 characters long.  
\par Most terminal emulators assume that screens contain 24 rows.  However, because the API call }{\uldb\cf11 InitFormBuf}{\v InitFormBuf}{ adds codes to home the cursor and erase to end of screen, you do not need to pad out definitions of short screen to exactly 24 lines.  A screen with 10 defined lines, for instance, will be displayed with 14 blank lines at the bottom.
{\v0\par\v}}\pard\plain \s2\li115\ri360\sb120\sa48\widctlpar\outlinelevel1\adjustright \b\f1\fs22\cgrid {Field definitions
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Within the screen image, fields are delimited by special characters.  The name of a field is contained within the field itself.  
\par }\pard \fi-450\li720\ri130\sa48\widctlpar\adjustright {[\tab starts an input field.  For T27 emulation, this character is replaced by a US character when the screen is sent to the user.  When the user presses the Transmit Screen key, characters within an input field are sent back to BurSim.
\par `\tab the grave accent character starts a transmittable prompt. For T27 emulation, this character is replaced by an FS character when the screen is sent to the user. When the user presses the Transmit Screen key, characters within such a field are sent back to BurSim.  The difference between an input field and a transmittable prompt is that a terminal emulator will not allow the user to change characters within a transmittable prompt.
\par ]\tab ends an input field or transmittable prompt.  The name of the field, as used by BurSim script API calls, consists of the characters between the opening [ or ` and the closing ], with trailing spaces trimmed.  The range of bytes on the screen referred to by the field does not include the opening [ or `, or the closing ].
\par \{\tab starts an output field.  Output fields are for use only by the }{\uldb\cf11 FillField}{\v FillField}{ routine; they do not cause special bytes to be sent to the terminal. 
{\v0\par\v}\}\tab ends an output field. The name of the field, as used by BurSim script API calls, consists of the characters between the opening \{ and the closing \}, with trailing spaces trimmed.  Unlike input fields, the range of bytes on the screen referred to by an output field does include the opening \{ and the closing \}.  This is because output fields do not use any special features of the terminal; instead, they exist only to identify areas of the screen that can easily be filled in by a script.
{\v0\par\v}}\pard \li115\ri130\sa48\widctlpar\adjustright {Any characters not within one of these field types are constant characters that are a permanent part of the definition of the screen. All fields are initialized with spaces, so if you do not fill a field before sending it to the user, it will appear blank.
\par }\pard\plain \s2\li115\ri360\sb120\sa48\widctlpar\outlinelevel1\adjustright \b\f1\fs22\cgrid {Field aliases
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Fields aliases are simply synonyms for fields.  Because the syntax of BurSim screen image definitions requires that the name of the field be embedded within the field itself, names of fields that don't take up much space on the screen must be short and often cryptic.  Field aliases allow a developer to use longer names for these fields, to ease development.
\par Alias definitions for a given form appear after a !EndForm line and before the next !Form line.  The syntax is
\par }{\f2 !Alias}{ NewSynonym=ExistingFieldName
\par }\pard\plain \s2\li115\ri360\sb120\sa48\widctlpar\outlinelevel1\adjustright \b\f1\fs22\cgrid {Example
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Consider this screen definition:
\par }\pard \li540\widctlpar\adjustright {\f2\fs16 !Form Main
\par Fredonia Swimming Association     \{DateAndTime  \}    `FORM]
\par 
\par Welcome to the Swimmer database.
\par 
\par Please make a selection with an "X":
\par    
\par     [A] Add a new swimmer
\par     [B] Search for a swimmer by:
\par              Last name: [LASTNAME   ]
\par         Swimmer number: [SWNum]
\par !EndForm
\par !Alias Add_Swimmer=A
\par }\pard\plain \s30\li540\ri130\sa48\widctlpar\adjustright \f2\fs16\cgrid {!Alias Search=B
\par }\pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {This defines a screen named Main, with these fields:
\par }\pard \s15\fi-1710\li1800\ri130\sa48\widctlpar\adjustright {DateAndTime \tab is a 15-character output field. 
\par FORM\tab is a 4-character transmittable prompt.  
\par A\tab is a 1-character input field.  It is also known as Add_Swimmer.
\par B\tab is a 1-character input field.  It is also known as Search.
\par LASTNAME\tab is an 11-character input field.
\par SWNum\tab is a 5-character input field.
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {All of these fields are initialized with spaces, so if no calls to FillField were made, when transmitted to a terminal, this screen would appear as:
\par }\pard \li540\widctlpar\adjustright {\f2\fs16 Fredonia Swimming Association                        \uc1\u9830\'3f    \u9668\'3f
\par 
\par Welcome to the Swimmer database.
\par 
\par Please make a selection with an "X":
\par    
\par     \u9658\'3f \u9668\'3f Add a new swimmer
\par     \u9658\'3f \u9668\'3f Search for a swimmer by:
\par              Last name: \u9658\'3f           \u9668\'3f
\par         Swimmer number: \u9658\'3f     \u9668\'3f
\par }\pard \li115\ri130\sa48\widctlpar\adjustright {
\par }\pard\plain \s2\li115\ri360\sb120\sa48\widctlpar\outlinelevel1\adjustright \b\f1\fs22\cgrid {Form API calls
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Form files are used with the API calls }{\uldb\cf11 OpenFormFile}{\v OpenFormFile}{, }{\uldb\cf11 OpenForm}{\v OpenForm}{, }{\uldb\cf11 InitFormBuf}{\v InitFormBuf}{, }{\uldb\cf11 FillField}{\v FillField}{, }{\uldb\cf11 SuppressField}{\v SuppressField}{, }{\uldb\cf11 GetInputField}{\v GetInputField}{, and }{\uldb\cf11 SendMCSBuf}{\v SendMCSBuf}{.  In typical use, a form file is opened once at program initialization, and handles to individual forms are set at this time.  For instance:
{\v0\par\v}}\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {FormFileID = OpenFormFile("SWIM.FRM")
\par FormIDMain = OpenForm(FormFileID,"MAIN")
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par Then in a message-processing loop, for each message, an output buffer is initialized with the contents of a form:
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {Buf = InitFormBuf(FormIDMain)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par Then as necessary, fields are filled in on the form:
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {FillField FormIDMain,"FORM",Buf,"MAIN"
\par FillField FormIDMain,"DateAndTime,Buf,Date & Time
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par Finally, the form is sent to the user:
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {retval = SendMCSBuf(Header, Buf)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par If and when the user transmits the form back to the script, you can extract fields:
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {LastName = GetInputField(FormIDMain, "LASTNAME", InBuf)
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par It is a good idea to give all screens a common transmittable-prompt field containing the name of the form.  This allows you to easily determine which form the user has transmitted.  For instance:
\par }\pard\plain \s30\li115\ri130\widctlpar\adjustright \f2\fs16\cgrid {InputFormName = GetInputField(FormIDMain,"FORM",InBuf)
\par If InputFormName = "EDIT" Then
\par    ...
\par End If
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {
\par }\pard\plain \s1\li115\ri130\sb120\sa80\widctlpar\outlinelevel0\adjustright \b\f1\kerning28\cgrid {\page }{\cs16\super #{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super #}{ Station_table}}}{ }{\cs16\super ${\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super $}{ Station table}}}{ }{\cs16\super @{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super @}{ Status|0|0|0|0||||||}}}{ }{\cs16\super +{\footnote \pard\plain \s15\li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {\cs16\super +}{ MAIN:0}}}{ Station table
\par }\pard\plain \li115\ri130\sa48\widctlpar\adjustright \f1\fs20\cgrid {Telnet terminal emulators can be configured to present a station name when connecting to a telnet terminal server such as BurSim.  (More correctly, the station name is referred to as a "location" in telnet terminology.)
\par BurSim can be configured to respond differently to different station names.  You can associate a limited number of attributes with a given station name via a station table.  A station table is an ASCII file named "stations.csv" located in BurSim's default directory.  Each line in the file describes one station.  Each line consists of these comma-separated fields:
\par }{\b Field\tab Meaning
\par {\pard\plain\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 1\fi-1710\li115\tx115 \tab}}\pard \fi-600\li715\ri130\sa48\widctlpar\jclisttab{}\tx715 \ls13\adjustright {Station name, case-insensitive.  If you can an entry named "Default", any stations not specifically mentioned in the file will be assigned the attributes of this Default station.
\par {\pard\plain\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 2\fi-600\li715\tx715 \tab}}\pard \fi-600\li715\ri130\sa48\widctlpar\jclisttab{}\tx715 \ls13\adjustright {Initial transaction, including a leading "/".  When the station connects, BurSim acts as if the user had typed this text.
\par }\pard \li115\ri130\sa48\widctlpar\adjustright {For instance, the file:
\par }\pard \li360\ri130\sa48\widctlpar\adjustright {\f2 FRED,/MYTRAN
\par Default,/LOGON
\par }\pard \li115\ri130\sa48\widctlpar\adjustright {specifies that stations connecting with the name FRED will start with the transaction /MYTRAN.  All other stations will start with the transaction /LOGON.  
\par If a connection does not specify a station that is present in the file and there is no default transaction, the connection will initially not be connected to any program.  In this case, the user will have to explicitly enter a transaction in order to have a meaningful session. 
\par In the current version of BurSim, it is possible for multiple stations to be connected with the same name.  This may change in future releases.
\par 
\par }}